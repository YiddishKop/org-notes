<p>
Today’s post regards <a href="http://emacs.stackexchange.com/a/246/50">my answer</a> to <a href="http://emacs.stackexchange.com/q/64/50">kaushalmodi's question</a>. Since the
beta is <a href="/emacs-stack-exchange-enters-beta.html">still private</a>, you might not be able to follow those links
quite yet, so I’ll summ it up here.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">The Question</h2>
<div class="outline-text-2" id="text-1">
<p>
Kaushalmodi uses <code>#+INCLUDE:</code> statements with line specifications in his
org files. Here is an example similar to his. 14 and 80 are the first
and last line of a class declaration in the source file, so they’re
quite obvious for a human to identify.
</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">#+INCLUDE: "code/my-class.sv" :src systemverilog :lines "14-80"</code></pre></figure>

<p>
The problem here is that whenever <i>“my-class.sv”</i> is edited those
line numbers are likely to become outdated. So you would have to go
through each org file which might include <i>“my-class.sv”</i> and update
the numbers.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">The Solution</h2>
<div class="outline-text-2" id="text-2">
<p>
Unfortunately, org-mode doesn’t have a flexible way of declaring
include statements. You either specify the line numbers or you don’t.
</p>

<p>
The <a href="http://emacs.stackexchange.com/a/286/50">solution was</a> to add <code>:range-begin</code> and <code>:range-end</code> keywords to
the statement
</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">#+INCLUDE: "code/my-class.sv" :src systemverilog :range-begin "^class" :range-end "^endclass" :lines "14-80"</code></pre></figure>
<p>
and then write a function which
</p>
<ol class="org-ol">
<li>goes through each <code>#+INCLUDE:</code> statement in the buffer,
</li>
<li>checks if it has <code>:range-begin</code> and/or <code>:range-end</code> keywords and
takes their arguments as regular expressions,
</li>
<li>visits the relevant file and searches for these regular expressions,
</li>
<li>checks what the line numbers are now,
</li>
<li>and updates them accordingly in the org buffer.
</li>
</ol>

<p>
This function can then be assigned to a key, added to
<a href="http://doc.endlessparentheses.com/Var/before-save-hook"><code>before-save-hook</code></a>, or added to one of org-mode’s bajillion available
hooks. Finally, to go the extra mile, we make the behaviour
customizable per file extension through a <code>defcustom</code>.
</p>
<figure class="highlight"><pre><code class="language-cl" data-lang="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">'before-save-hook</span> <span class="nf">#'</span><span class="nv">endless/update-includes</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">endless/update-includes</span> <span class="p">(</span><span class="k">&amp;rest</span> <span class="k">ignore</span><span class="p">)</span>
  <span class="s">"Update the line numbers of #+INCLUDE:s in current buffer.
Only looks at INCLUDEs that have either :range-begin or :range-end.
This function does nothing if not in org-mode, so you can safely
add it to `before-save-hook'."</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">derived-mode-p</span> <span class="ss">'org-mode</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">save-excursion</span>
      <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">while</span> <span class="p">(</span><span class="nv">search-forward-regexp</span>
              <span class="s">"^\\s-*#\\+INCLUDE: *\"\\([^\"]+\\)\".*:range-\\(begin\\|end\\)"</span>
              <span class="no">nil</span> <span class="ss">'noerror</span><span class="p">)</span>
        <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">file</span> <span class="p">(</span><span class="nv">expand-file-name</span> <span class="p">(</span><span class="nv">match-string-no-properties</span> <span class="mi">1</span><span class="p">)))</span>
               <span class="nv">lines</span> <span class="nv">begin</span> <span class="nv">end</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">forward-line</span> <span class="mi">0</span><span class="p">)</span>
          <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">"^.*:range-begin *\"\\([^\"]+\\)\""</span><span class="p">)</span>
            <span class="p">(</span><span class="k">setq</span> <span class="nv">begin</span> <span class="p">(</span><span class="nv">match-string-no-properties</span> <span class="mi">1</span><span class="p">)))</span>
          <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">"^.*:range-end *\"\\([^\"]+\\)\""</span><span class="p">)</span>
            <span class="p">(</span><span class="k">setq</span> <span class="nv">end</span> <span class="p">(</span><span class="nv">match-string-no-properties</span> <span class="mi">1</span><span class="p">)))</span>
          <span class="p">(</span><span class="k">setq</span> <span class="nv">lines</span> <span class="p">(</span><span class="nv">endless/decide-line-range</span> <span class="nv">file</span> <span class="nv">begin</span> <span class="nv">end</span><span class="p">))</span>
          <span class="p">(</span><span class="nb">when</span> <span class="nv">lines</span>
            <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">".*:lines *\"\\([-0-9]+\\)\""</span><span class="p">)</span>
                <span class="p">(</span><span class="nv">replace-match</span> <span class="nv">lines</span> <span class="ss">:fixedcase</span> <span class="ss">:literal</span> <span class="no">nil</span> <span class="mi">1</span><span class="p">)</span>
              <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">line-end-position</span><span class="p">))</span>
              <span class="p">(</span><span class="nv">insert</span> <span class="s">" :lines \""</span> <span class="nv">lines</span> <span class="s">"\""</span><span class="p">))))))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">endless/decide-line-range</span> <span class="p">(</span><span class="nv">file</span> <span class="nv">begin</span> <span class="nv">end</span><span class="p">)</span>
  <span class="s">"Visit FILE and decide which lines to include.
BEGIN and END are regexps which define the line range to use."</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">(</span><span class="nv">l</span> <span class="nv">r</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">save-match-data</span>
      <span class="p">(</span><span class="nv">with-temp-buffer</span>
        <span class="p">(</span><span class="nv">insert-file</span> <span class="nv">file</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">))</span>
        <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">begin</span><span class="p">)</span>
            <span class="p">(</span><span class="k">setq</span> <span class="nv">l</span> <span class="s">""</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">search-forward-regexp</span> <span class="nv">begin</span><span class="p">)</span>
          <span class="p">(</span><span class="k">setq</span> <span class="nv">l</span> <span class="p">(</span><span class="nv">line-number-at-pos</span> <span class="p">(</span><span class="nv">match-beginning</span> <span class="mi">0</span><span class="p">))))</span>
        <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">end</span><span class="p">)</span>
            <span class="p">(</span><span class="k">setq</span> <span class="nv">r</span> <span class="s">""</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">search-forward-regexp</span> <span class="nv">end</span><span class="p">)</span>
          <span class="p">(</span><span class="k">setq</span> <span class="nv">r</span> <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nv">line-number-at-pos</span> <span class="p">(</span><span class="nv">match-end</span> <span class="mi">0</span><span class="p">)))))</span>
        <span class="p">(</span><span class="nb">format</span> <span class="s">"%s-%s"</span> <span class="nv">l</span> <span class="nv">r</span><span class="p">)))))</span></code></pre></figure>
</div>
</div>

   <p><a href="http://endlessparentheses.com/updating-org-mode-include-statements-on-the-fly.html?source=rss#disqus_thread">Comment on this.</a></p>
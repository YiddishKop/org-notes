<p>One of the great things with programming is that you can automate things that is boring. As a student I often get schedules in the form of Word documents. I prefer to have all my activities in a calendar and used to manually put every time in a course into my calendar. Today I got a new schedule and thought: I could probably do this using Python.</p>
<p>After some searching around on the Internet I found the Python packages <a href="https://python-docx.readthedocs.io/en/latest/" target="_blank">python-docx</a> and <a href="http://icalendar.readthedocs.io/en/latest/usage.html" target="_blank">iCalendar</a>. In this post I will show you how to use these to packages to create an iCalender file that can be loaded in to a lot of available calendars.</p>
<h2>Installing python-docx &amp; iCalendar</h2>
<p>Both Python packages can be installed using pip:</p><pre class="crayon-plain-tag">pip install python-docx icalendar</pre><p>In the example code I used a table from a Word document containing 4 columns. It is a pretty simple example but in the first column store the date, the second the time, third the room (location), and the last the activity of the event (e.g., lecture).</p>
<a href="http://www.marsja.se/wp-content/uploads/2017/03/docx-schedule-to-icalender-python.png"><img class="size-full wp-image-1930" src="http://www.marsja.se/wp-content/uploads/2017/03/docx-schedule-to-icalender-python.png" alt="" width="645" height="520" /></a>Schedule
<h2>Extracting a table fromÂ  a Word Document</h2>
<p>In the first code chunk, below, we start by importing the needed modules. Apart from using Document from python-docx, Calendar and Event from iCalendar, we are going to use datetime from datetime. Datetime is used to store the date in a format that icalendar &#8220;likes&#8221;.</p><pre class="crayon-plain-tag">from datetime import datetime
from docx import Document
from icalendar import Calendar, Event

document = Document('course_schedule.docx')
table = document.tables[0]

data = []
keys = {}

for i, row in enumerate(table.rows):
    text = (cell.text for cell in row.cells)

    if i == 0:
        keys = tuple(text)
        continue

    row_data = dict(zip(keys, text))</pre><p>In the next chunk of code (in the same loop as above) we split the date and time. We do this since due to the formatting of the date and time in the example (&#8220;5/4&#8221; and &#8220;9-12). As previously mentioned the date need to be formatted in a certain way (e.g., using Pythons datetime). In the table from the Word document, some of the events are deadlines and, thus, have no set time. Therefore, we need to see if we have a time to use. If not, we set the time to 17:00-17:01. There is probably a better way to do this but this will do for now. The last line adds each event (as a Python dictionary) to our list containing all data.</p><pre class="crayon-plain-tag">e_date = row_data['Date'].split('/')
    e_time = row_data['Time'].split('-')

    if len(e_time) &gt; 1:

        row_data[u'dtstart'] = datetime(2017, int(e_date[1]), int(e_date[0]),
                                       int(e_time[0]), 0, 0)
        row_data[u'dtend'] = datetime(2017, int(e_date[1]), int(e_date[0]),
                                     int(e_time[1]), 0, 0)

    else:
        row_data[u'dtstart'] = datetime(2017, int(e_date[1]), int(e_date[0]),
                                        17,1, 0)
        row_data[u'dtend'] = datetime(2017, int(e_date[1]), int(e_date[0]),
                                      17 ,0,0)

    data.append(row_data)</pre><p></p>
<h2>Creating the iCalendar file</h2>
<p>Now that we have a list of dictionaries containing our lectures/seminars (one for each dictionary) we can use iCalendar to create the calendar. First we create the calendar object and the continue with looping through our list of dictionaries. In the loop we create an event and add the information. In the example here we use the activity as both summary and description but we could have had a summary of the activity and a more detailed description if we&#8217;d liked.</p>
<p>The crucial parts, may be, are the &#8216;dtstart&#8217; and &#8216;dtend&#8217;. This is the starting time and ending time of the event (e.g., a lecture). We continue to add the location (e.g., the room of the event) and add the event to our calender. Finally, we create a file (&#8216;schedule.ics&#8217;), write the calender to the file, and close the file.</p><pre class="crayon-plain-tag">cal = Calendar()

for row in data:
    event = Event()
        
    event.add('summary', row['Activity'])
    event.add('dtstart', row['dtstart'])
    event.add('dtend', row['dtend'])
    event.add('description', row['Activity'])
    event.add('location', row['Room'])
    cal.add_component(event)

f = open('course_schedule.ics', 'wb')
f.write(cal.to_ical())
f.close()</pre><p>Now we have our iCalendar file (course_schedule.ics) and can load it into our calender software. I typically use Lightning (a calendar addon for Thunderbird). To open the iCalendar file we created using Python go to File, Open, and Calendar File. Finally select the your iCalendar file:</p>
<p><a href="http://www.marsja.se/wp-content/uploads/2017/03/python-read-docx-table-schedule-create-calendar-open-file.png"><img class="aligncenter wp-image-1950 size-large" src="http://www.marsja.se/wp-content/uploads/2017/03/python-read-docx-table-schedule-create-calendar-open-file-1024x575.png" alt="Loading iCalendar file created from Word table into Lightning" width="792" height="445" /></a>After you done that your new schedule should be loaded into Lightning. Your schedule will be loaded as a separate calendar. As you can see in the image below your lecture and computer labs will show up.</p>
<p><a href="http://www.marsja.se/wp-content/uploads/2017/03/python-read-docx-table-schedule-create-calendar-added-events.png"><img class="aligncenter wp-image-1951 size-large" src="http://www.marsja.se/wp-content/uploads/2017/03/python-read-docx-table-schedule-create-calendar-added-events-1024x575.png" alt="" width="792" height="445" /></a>In this post, we learned how to use Python (python-docx) to extract a schedule from a table in a Word Document (.docx). We used the data to create an iCalendar file that we can load into many Calendar applications (e.g., Google, Lightning).</p>
<p>The post <a rel="nofollow" href="http://www.marsja.se/python-how-to-create-icalendar-table-word-doc/">How to use Python to create an iCalendar file from a Word table</a> appeared first on <a rel="nofollow" href="http://www.marsja.se">Erik Marsja</a>.</p>
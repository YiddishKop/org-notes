<p>
<code>CIDER 0.11.0</code> has been out for less than week and already the snapshots are
getting new features. This one comes from a gentleman called <a href="https://github.com/clojure-emacs/cider-nrepl/pull/303">Chris Perkins</a>. It
provides an easy way to automatically skip some breakpoints during evaluation,
and it even comes with 300 brand new lines of tests.
</p>

<p>
The feature is very straightforward, and is already available on the snapshots
of <code>0.12.0</code>. You’ve always been able to debug functions by adding a <code>#dbg</code> in
before it and then reevaluating its definition.
</p>
<figure class="highlight"><pre><code class="language-clojure" data-lang="clojure"><span class="o">#</span><span class="n">dbg</span><span class="w">
</span><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">buggy-function</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">(</span><span class="k">for</span><span class="w"> </span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="p">(</span><span class="nb">range</span><span class="w"> </span><span class="mi">3000</span><span class="p">)]</span><span class="w">
    </span><span class="p">(</span><span class="nb">some</span><span class="w"> </span><span class="p">(</span><span class="nf">kinda</span><span class="w"> </span><span class="n">complicated</span><span class="p">)</span><span class="w">
          </span><span class="n">code</span><span class="w"> </span><span class="p">(</span><span class="nf">logic</span><span class="p">)</span><span class="w"> </span><span class="n">i</span><span class="p">)))</span></code></pre></figure>
<p>
However, if you’re trying to debug a problem that only happens somewhere around
<code>i = 1000</code>, then you’re going to have to step through the body of that <code>for</code> one
thousand times before getting to where you need.
</p>

<p>
This new feature lets you specify a condition, and the debugger will
automatically skip all breakpoints as long as that condition is false. You
specify it via the <code>:break/when</code> metadata. In the above example, that would be
something like this.
</p>
<figure class="highlight"><pre><code class="language-clojure" data-lang="clojure"><span class="o">#</span><span class="n">dbg</span><span class="w">
</span><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">buggy-function</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">(</span><span class="k">for</span><span class="w"> </span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="p">(</span><span class="nb">range</span><span class="w"> </span><span class="mi">3000</span><span class="p">)]</span><span class="w">
    </span><span class="o">^</span><span class="p">{</span><span class="no">:break/when</span><span class="w"> </span><span class="p">(</span><span class="nb">&gt;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="mi">1000</span><span class="p">)}</span><span class="w">
    </span><span class="p">(</span><span class="nb">some</span><span class="w"> </span><span class="p">(</span><span class="nf">kinda</span><span class="w"> </span><span class="n">complicated</span><span class="p">)</span><span class="w">
          </span><span class="n">code</span><span class="w"> </span><span class="p">(</span><span class="nf">logic</span><span class="p">)</span><span class="w"> </span><span class="n">i</span><span class="p">)))</span></code></pre></figure>
<p>
Thus, everything inside the <code>(some ...)</code> form would be skipped as long as <code>i ≤ 1000</code>.
</p>

<p>
The debugger’s inner workings are not what I’d call simple, so it makes me happy
to know I’ve made the code legible enough for people to understand without my
help. Of course, it certainly helped that Chris is no average fellow. Did I
mention he even wrote a DSL for the new tests?
</p>

   <p><a href="http://endlessparentheses.com/conditional-breakpoints-in-the-cider-debugger.html?source=rss#disqus_thread">Comment on this.</a></p>
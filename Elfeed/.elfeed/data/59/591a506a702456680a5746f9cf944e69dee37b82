<div class="pf-content"><p>Last week I was doing some Test Driven Development training and overheard someone mention another programming language that had a test runner that you could set up to watch your project directory and run your tests when the files changed. I thought that was a neat idea. I also thought I could easily write my own Python script to do the same thing. Here&#8217;s a pretty rough version:</p>
<pre class="python"><span>import</span> argparse
<span>import</span> <span>os</span>
<span>import</span> <span>subprocess</span>
<span>import</span> <span>time</span>
&nbsp;
&nbsp;
<span>def</span> get_args<span>&#40;</span><span>&#41;</span>:
    <span>parser</span> = argparse.<span>ArgumentParser</span><span>&#40;</span>
        description=<span>&quot;A File Watcher that executes the specified tests&quot;</span>
        <span>&#41;</span>
    <span>parser</span>.<span>add_argument</span><span>&#40;</span><span>'--tests'</span>, action=<span>'store'</span>, required=<span>True</span>,
                        <span>help</span>=<span>'The path to the test file to run'</span><span>&#41;</span>
    <span>parser</span>.<span>add_argument</span><span>&#40;</span><span>'--project'</span>, action=<span>'store'</span>, required=<span>False</span>,
                        <span>help</span>=<span>'The folder where the project files are'</span><span>&#41;</span>
    <span>return</span> <span>parser</span>.<span>parse_args</span><span>&#40;</span><span>&#41;</span>
&nbsp;
&nbsp;
<span>def</span> watcher<span>&#40;</span>test_path, project_path=<span>None</span><span>&#41;</span>:
    <span>if</span> <span>not</span> project_path:
        project_path = <span>os</span>.<span>path</span>.<span>dirname</span><span>&#40;</span>test_path<span>&#41;</span>
&nbsp;
    f_dict = <span>&#123;</span><span>&#125;</span>
&nbsp;
    <span>while</span> <span>True</span>:
        files = <span>os</span>.<span>listdir</span><span>&#40;</span>project_path<span>&#41;</span>
        <span>for</span> f <span>in</span> files:
            full_path = <span>os</span>.<span>path</span>.<span>join</span><span>&#40;</span>project_path, f<span>&#41;</span>
            mod_time = <span>os</span>.<span>stat</span><span>&#40;</span>full_path<span>&#41;</span>.<span>st_mtime</span>
            <span>if</span> full_path <span>not</span> <span>in</span> f_dict:
                f_dict<span>&#91;</span>full_path<span>&#93;</span> = mod_time
            <span>elif</span> mod_time <span>!</span>= f_dict<span>&#91;</span>full_path<span>&#93;</span>:
                <span># Run the tests</span>
                <span>cmd</span> = <span>&#91;</span><span>'python'</span>, test_path<span>&#93;</span>
                <span>subprocess</span>.<span>call</span><span>&#40;</span><span>cmd</span><span>&#41;</span>
                <span>print</span><span>&#40;</span><span>'-'</span> <span>*</span> <span>70</span><span>&#41;</span>
                f_dict<span>&#91;</span>full_path<span>&#93;</span> = mod_time
&nbsp;
        <span>time</span>.<span>sleep</span><span>&#40;</span><span>1</span><span>&#41;</span>
&nbsp;
&nbsp;
<span>def</span> main<span>&#40;</span><span>&#41;</span>:
    args = get_args<span>&#40;</span><span>&#41;</span>
    w = watcher<span>&#40;</span>args.<span>tests</span>, args.<span>project</span><span>&#41;</span>
&nbsp;
<span>if</span> __name__ == <span>'__main__'</span>:
    main<span>&#40;</span><span>&#41;</span></pre>
<p>To run this script, you would need to do something like this:</p>
<p><code><br />
python watcher.py --test ~/path/to/tests.py --project ~/project/path<br />
</code></p>
<p><span id="more-6242"></span></p>
<p>Now let&#8217;s take a moment to talk about this script. The first function uses Python&#8217;s <strong>argparse</strong> module to make the program accept up to two command line arguments: &#8211;test and &#8211;project. The first is the path to the Python test script while the second is for the folder where the code that is to be tested resides. The next function, <strong>watcher</strong>, will loop forever and grab all the files out of the folder that was passed in or use the folder that the test file is in. It will grab each file&#8217;s modified time and save it to a dictionary. The key is set to the full path of the file and the value is the modification time. Next we check if the modification time has changed. If not, we sleep for a second and check again. If it has changed, then we run the tests.</p>
<p>At this point, you should be able to edit your code and tests in your favorite Python editor and watch your tests run in the terminal. </p>
<hr />
<h3>Using Watchdog</h3>
<p>
<p>I looked around for other cross-platform methods of watching a directory and came across the <strong><a href="https://pypi.python.org/pypi/watchdog" target="_blank">watchdog</a></strong> project. It hasn&#8217;t been updated since 2015 (at the time of writing), but I tested it out and it seemed to work fine for me. You can install watchdog using pip:</p>
<p><code><br />
pip install watchdog<br />
</code></p>
<p>Now that we have watchdog installed, let&#8217;s create some code that does something similar to the previous example:</p>
<pre class="python"><span>import</span> argparse
<span>import</span> <span>os</span>
<span>import</span> <span>subprocess</span>
<span>import</span> <span>time</span>
&nbsp;
<span>from</span> watchdog.<span>observers</span> <span>import</span> Observer
<span>from</span> watchdog.<span>events</span> <span>import</span> FileSystemEventHandler
&nbsp;
<span>def</span> get_args<span>&#40;</span><span>&#41;</span>:
    <span>parser</span> = argparse.<span>ArgumentParser</span><span>&#40;</span>
        description=<span>&quot;A File Watcher that executes the specified tests&quot;</span>
        <span>&#41;</span>
    <span>parser</span>.<span>add_argument</span><span>&#40;</span><span>'--tests'</span>, action=<span>&quot;store&quot;</span>, required=<span>True</span>,
                        <span>help</span>=<span>'The path to the test file to run'</span><span>&#41;</span>
    <span>parser</span>.<span>add_argument</span><span>&#40;</span><span>'--project'</span>, action=<span>'store'</span>, required=<span>False</span>,
                        <span>help</span>=<span>'The folder where the project files are'</span><span>&#41;</span>
    <span>return</span> <span>parser</span>.<span>parse_args</span><span>&#40;</span><span>&#41;</span>
&nbsp;
&nbsp;
<span>class</span> FW<span>&#40;</span>FileSystemEventHandler<span>&#41;</span>:
    <span>def</span> <span>__init__</span><span>&#40;</span><span>self</span>, test_file_path<span>&#41;</span>:
        <span>self</span>.<span>test_file_path</span> = test_file_path
&nbsp;
    <span>def</span> on_any_event<span>&#40;</span><span>self</span>, event<span>&#41;</span>:
&nbsp;
        <span>if</span> <span>os</span>.<span>path</span>.<span>exists</span><span>&#40;</span><span>self</span>.<span>test_file_path</span><span>&#41;</span>:
            <span>cmd</span> = <span>&#91;</span><span>'python'</span>, <span>self</span>.<span>test_file_path</span><span>&#93;</span>
            <span>subprocess</span>.<span>call</span><span>&#40;</span><span>cmd</span><span>&#41;</span>
            <span>print</span><span>&#40;</span><span>'-'</span> <span>*</span> <span>70</span><span>&#41;</span>
&nbsp;
<span>if</span> __name__ ==<span>'__main__'</span>:
    args = get_args<span>&#40;</span><span>&#41;</span>
    observer = Observer<span>&#40;</span><span>&#41;</span>
    path = args.<span>tests</span>
    watcher = FW<span>&#40;</span>path<span>&#41;</span>
&nbsp;
    <span>if</span> <span>not</span> args.<span>project</span>:
        project_path = <span>os</span>.<span>path</span>.<span>dirname</span><span>&#40;</span>args.<span>tests</span><span>&#41;</span>
    <span>else</span>:
        project_path = args.<span>project</span>
&nbsp;
    <span>if</span> <span>os</span>.<span>path</span>.<span>exists</span><span>&#40;</span>path<span>&#41;</span> <span>and</span> <span>os</span>.<span>path</span>.<span>isfile</span><span>&#40;</span>path<span>&#41;</span>:
        observer.<span>schedule</span><span>&#40;</span>watcher, project_path, recursive=<span>True</span><span>&#41;</span>
        observer.<span>start</span><span>&#40;</span><span>&#41;</span>
        <span>try</span>:
            <span>while</span> <span>True</span>:
                <span>time</span>.<span>sleep</span><span>&#40;</span><span>1</span><span>&#41;</span>
        <span>except</span> <span>KeyboardInterrupt</span>:
            observer.<span>stop</span><span>&#40;</span><span>&#41;</span>
        observer.<span>join</span><span>&#40;</span><span>&#41;</span>
    <span>else</span>:
        <span>print</span><span>&#40;</span><span>'There is something wrong with your test path'</span><span>&#41;</span></pre>
<p>In this code, we keep our <strong>get_args()</strong> function and add a class. The class subclass&#8217;s watchdog&#8217;s <strong>FileSystemEventHandler</strong> class. We end up passing in our test file path to the class and override the <strong>on_any_event()</strong> method. This method fires on any time of file system event. When that happens, we run our tests. The last bit is at the end of the code where we create an <strong>Observer()</strong> object and tell it to watch the specified project path and to call our event handler should anything happen to the files there. </p>
<hr />
<h3>Wrapping Up</h3>
<p><p>
At this point, you should be able to start trying out these ideas on your own code. There are also some platform specific methods to watch a folder as well (like <a href="http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html" target="_blank">PyWin32</a>) but if you run on multiple operating systems like I do, then watchdog or rolling your own might be a better choice.</p>
<h3>Related Readings</h3>
<p>
<ul>
<li>StackOverflow: <a href="http://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes-using-python" target="_blank">How do I watch a file for changes using Python?</a></li>
<li>Watch a Directory <a href="http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html" target="_blank">for Changes</a></li>
</ul>
</p></p></p></div><p><a class="a2a_button_facebook" href="http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F14%2Fhow-to-run-python-tests-continuously-while-coding%2F&linkname=How%20to%20Run%20Python%20Tests%20%E2%80%9CContinuously%E2%80%9D%20While%20Coding" title="Facebook" rel="nofollow" target="_blank"></a><a class="a2a_button_twitter" href="http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F14%2Fhow-to-run-python-tests-continuously-while-coding%2F&linkname=How%20to%20Run%20Python%20Tests%20%E2%80%9CContinuously%E2%80%9D%20While%20Coding" title="Twitter" rel="nofollow" target="_blank"></a><a class="a2a_button_google_plus" href="http://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F14%2Fhow-to-run-python-tests-continuously-while-coding%2F&linkname=How%20to%20Run%20Python%20Tests%20%E2%80%9CContinuously%E2%80%9D%20While%20Coding" title="Google+" rel="nofollow" target="_blank"></a><a class="a2a_dd addtoany_share_save" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2017%2F03%2F14%2Fhow-to-run-python-tests-continuously-while-coding%2F&title=How%20to%20Run%20Python%20Tests%20%E2%80%9CContinuously%E2%80%9D%20While%20Coding"></a></p>
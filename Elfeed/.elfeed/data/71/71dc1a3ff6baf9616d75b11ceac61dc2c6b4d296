<p>
Now that the <a href="/debugging-emacs-lisp-part-1-earn-your-independence.html">previous post</a> has leveled the playing field, we go into slightly
more advanced debugging features. First we go deeper into Edebug navigation
commands, and then we discuss when Edebug just won't do and explain the power of
Emacs' built-in debugger.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Edebug</h2>
<div class="outline-text-2" id="text-1">
<p>
Stepping through a function with <code>n</code> and finishing with <code>c</code> is just a subset of
what Edebug can do. You can find the full list of commands on <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug">Edebug's manual
page</a> (under “Modes”, “Jumping”, and “Misc”), but here are the most useful ones:
</p>

<dl class="org-dl">
<dt> <kbd>q</kbd> </dt><dd>Quit current execution, occasionally more useful than <kbd>c</kbd>, <kbd>C</kbd> and <kbd>G</kbd>.
</dd>
<dt> <kbd>h</kbd> </dt><dd>Move point somewhere else, then hit <kbd>h</kbd>. Everything in between will be
“skipped” (executed, but not displayed), and Edebug continues from
there. Highly useful in very long functions.
</dd>
<dt> <kbd>o</kbd> </dt><dd>Move out of the containing sexp. Tremendously useful in loops.
</dd>
<dt> <kbd>i</kbd> </dt><dd>Go “inside” the function called at point. In other words, if point is
immediately before a function call, <kbd>i</kbd> will instrument the function as
if you had called <kbd>C-M-u C-M-x</kbd> on it and leave you inside this new
Edebug session.
</dd>
</dl>

<p>
You also have the possibility of setting breakpoints, which I may go into later.
But the keys above are enough to do what Edebug is best at, interactive
investigation when you just don't know where the problem is.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><code>debug</code> and <code>debug-on-entry</code></h2>
<div class="outline-text-2" id="text-2">
<p>
As shiny as it is, Edebug isn't exactly clean. Its instrumentation, though
invisible, is not free of side-effects. It is not surprising then, that some
bugs <a href="https://github.com/Malabarba/fancy-narrow/issues/9">simply vanish</a> when you Edebug them. Fortunately, that's not our only
option. Emacs also offers the <a href="http://doc.endlessparentheses.com/Fun/debug"><code>debug</code></a> function, which is powerful and
straightforward.
</p>

<p>
Just add <code>(debug)</code> anywhere inside a function. Next time the function is
executed, Emacs will present you with a backtrace of the code state at that
point. Alternatively, you invoke the command <a href="http://doc.endlessparentheses.com/Fun/debug-on-entry"><code>debug-on-entry</code></a> and give it the
name of a function.
</p>

<p>
Now, you might be forgiven to think there's nothing special about that. Any
programming language worth its salt can spew out backtraces on demand. But
that's not the end of it. Though this backtrace display might not be as pretty
as Edebug, it's every bit as interactive.
</p>

<p>
<a href="/images/debug-png9-20fps.gif">There's a gif here</a> (linked separately to avoid annoyance) which shows what you
can do by just hitting <kbd>d</kbd> to step deeper into the structure, and then <kbd>c</kbd> to
quickly get out. You can also jump around a bit with <kbd>j</kbd>, and evaluate
expressions under an environment as if you were inside the function with <kbd>e</kbd>.
</p>

<p>
These are all much easier to use than to explain, so give it a shot yourself.
Write <code>(debug)</code> inside a function of yours and start jumping around in there.
You should get the hang of things quickly enough.
</p>
</div>
</div>

   <p><a href="http://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html?source=rss#disqus_thread">Comment on this.</a></p>
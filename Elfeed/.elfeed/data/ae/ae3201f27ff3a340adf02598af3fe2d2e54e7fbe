<p>
<i>“With great power comes great responsibility,”</i> and Emacs is a prime example of
that. The versatility of having an editor that’s a lisp interpreter is truly
empowering, but it can also backfire on you in the most unexpected ways. If
you’ve ever ran into a foggy incompatibility issue between two unrelated
packages, that manifested itself by turning on your mother’s coffee machine every other
weekday, then you know how difficult this can be to track down.
</p>

<p>
One recurring theme on <a href="http://emacs.stackexchange.com/">Emacs.StackExchange</a> is that users will come to us with
some random arcane issue, and either provide no more information or dump their
init file on the question. The best answer we can give in these cases is for
them to <a href="http://emacs.stackexchange.com/search?q=bisect">bisect their init file</a>. But if that’s always the case, why not automate
it?
</p>

<p>
<a href="https://github.com/Malabarba/elisp-bug-hunter">The Bug Hunter</a> is an Emacs library that does that for you.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Hunting real errors</h2>
<div class="outline-text-2" id="text-1">
<p>
If there’s an error being thrown during initialization, all it takes is a single
command.
</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">M-x bug-hunter-init-file RET RET</code></pre></figure>
<p>
The Bug-Hunter will do a bisection search in your init file for the source of
the error. Thanks to the magic powers of bisection, it is surprisingly fast even
on huge init files.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Hunting unexpected behaviour</h2>
<div class="outline-text-2" id="text-2">
<p>
If no actual error is being thrown, but some behaviour is still clearly wrong,
then it’s a little more tricky: you need to come up with an assertion. That is,
you need a snippet of Emacs-Lisp code that will return <code>t</code> if something is wrong
and <code>nil</code> if all is fine.
</p>

<p>
For instance, I wanted to figure out why the <code>cl</code> library was being loaded even
though I didn’t explicitly require it anywhere. In this case, the snippet
<code>(featurep 'cl)</code> gives me what I need. It returns <code>nil</code> before the library is
loaded, and returns <code>t</code> afterwards.
</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">M-x bug-hunter-init-file RET (featurep 'cl) RET</code></pre></figure>

<div class="figure">
<p><img src="/images/cl-example.png" alt="cl-example.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Interactive debugging</h2>
<div class="outline-text-2" id="text-3">
<p>
Unfortunately this is not supported yet. Communicating with a background Emacs
process that is not in batch mode is complicated. 
</p>

<p>
Usually, though, you shouldn’t need it. There’s almost always a snippet that
will work for your needs. If your problem is not triggering an error, and you
don’t know enough Elisp to write an assertion, let me know about your problem
and maybe I can write one for you.
</p>

<p>
Even better, shoot us a question over at <a href="http://emacs.stackexchange.com/">Emacs.StackExchange</a>. We’re always glad
to help.
</p>
</div>
</div>

   <p><a href="http://endlessparentheses.com/debug-your-emacs-init-file-with-the-bug-hunter.html?source=rss#disqus_thread">Comment on this.</a></p>
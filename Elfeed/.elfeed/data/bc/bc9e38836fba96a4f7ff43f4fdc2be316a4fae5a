


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Summary notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Raman spectroscopy is a vibrational spectroscopy. The data typically comes as intensity vs. wavenumber, and it is discrete. Sometimes it is necessary to identify the precise location of a peak. In this post, we will use spline smoothing to construct an interpolating function of the data, and then use fminbnd to identify peak positions.
&lt;/p&gt;

&lt;p&gt;
This example was originally worked out in Matlab at &lt;a href="http://matlab.cheme.cmu.edu/2012/08/27/peak-finding-in-raman-spectroscopy/"&gt;http://matlab.cheme.cmu.edu/2012/08/27/peak-finding-in-raman-spectroscopy/&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
numpy:loadtxt
&lt;/p&gt;

&lt;p&gt;
Let us take a look at the raw data.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #8b0000;"&gt;as&lt;/span&gt; np
&lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #8b0000;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;w&lt;/span&gt;, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;i&lt;/span&gt; = np.loadtxt(&lt;span style="color: #228b22;"&gt;'data/raman.txt'&lt;/span&gt;, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;usecols&lt;/span&gt;=(&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;0&lt;/span&gt;, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;1&lt;/span&gt;), &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;unpack&lt;/span&gt;=&lt;span style="color: #8b0000;"&gt;True&lt;/span&gt;)

plt.plot(w, i)
plt.xlabel(&lt;span style="color: #228b22;"&gt;'Raman shift (cm$^{-1}$)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #228b22;"&gt;'Intensity (counts)'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #228b22;"&gt;'images/raman-1.png'&lt;/span&gt;)
plt.show()
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;gt;&amp;gt;&amp;gt; [&amp;lt;matplotlib.lines.Line2D object at 0x10b1d3190&amp;gt;]
&amp;lt;matplotlib.text.Text object at 0x10b1b1b10&amp;gt;
&amp;lt;matplotlib.text.Text object at 0x10bc7f310&amp;gt;
&lt;/pre&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-1.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The next thing to do is narrow our focus to the region we are interested in between 1340 cm^{-1} and 1360 cm^{-1}.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;ind&lt;/span&gt; = (w &amp;gt; &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;1340&lt;/span&gt;) &amp;amp; (w &amp;lt; &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;1360&lt;/span&gt;)
&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;w1&lt;/span&gt; = w[ind]
&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;i1&lt;/span&gt; = i[ind]

plt.plot(w1, i1, &lt;span style="color: #228b22;"&gt;'b. '&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #228b22;"&gt;'Raman shift (cm$^{-1}$)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #228b22;"&gt;'Intensity (counts)'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #228b22;"&gt;'images/raman-2.png'&lt;/span&gt;)
plt.show()
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; [&amp;lt;matplotlib.lines.Line2D object at 0x10bc7a4d0&amp;gt;]
&amp;lt;matplotlib.text.Text object at 0x10bc08090&amp;gt;
&amp;lt;matplotlib.text.Text object at 0x10bc49710&amp;gt;
&lt;/pre&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-2.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Next we consider a scipy:UnivariateSpline. This function "smooths" the data.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #8b0000;"&gt;from&lt;/span&gt; scipy.interpolate &lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; UnivariateSpline

# &lt;span style="color: #ff0000; font-weight: bold;"&gt;s is a "smoothing" factor&lt;/span&gt;
&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;sp&lt;/span&gt; = UnivariateSpline(w1, i1, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;k&lt;/span&gt;=&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;4&lt;/span&gt;, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;s&lt;/span&gt;=&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;2000&lt;/span&gt;)

plt.plot(w1, i1, &lt;span style="color: #228b22;"&gt;'b. '&lt;/span&gt;)
plt.plot(w1, sp(w1), &lt;span style="color: #228b22;"&gt;'r-'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #228b22;"&gt;'Raman shift (cm$^{-1}$)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #228b22;"&gt;'Intensity (counts)'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #228b22;"&gt;'images/raman-3.png'&lt;/span&gt;)
plt.show()
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;gt;&amp;gt;&amp;gt; ... &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; [&amp;lt;matplotlib.lines.Line2D object at 0x1105633d0&amp;gt;]
[&amp;lt;matplotlib.lines.Line2D object at 0x10dd70250&amp;gt;]
&amp;lt;matplotlib.text.Text object at 0x10dd65f10&amp;gt;
&amp;lt;matplotlib.text.Text object at 0x1105409d0&amp;gt;
&lt;/pre&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-3.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Note that the UnivariateSpline function returns a "callable" function! Our next goal is to find the places where there are peaks. This is defined by the first derivative of the data being equal to zero. It is easy to get the first derivative of a UnivariateSpline with a second argument as shown below.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;# &lt;span style="color: #ff0000; font-weight: bold;"&gt;get the first derivative evaluated at all the points&lt;/span&gt;
&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;d1s&lt;/span&gt; = sp.derivative()

&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;d1&lt;/span&gt; = d1s(w1)

# &lt;span style="color: #ff0000; font-weight: bold;"&gt;we can get the roots directly here, which correspond to minima and&lt;/span&gt;
# &lt;span style="color: #ff0000; font-weight: bold;"&gt;maxima.&lt;/span&gt;
&lt;span style="color: #8b0000;"&gt;print&lt;/span&gt;(&lt;span style="color: #228b22;"&gt;'Roots = {}'&lt;/span&gt;.format(sp.derivative().roots()))
&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;minmax&lt;/span&gt; = sp.derivative().roots()

plt.clf()
plt.plot(w1, d1, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;label&lt;/span&gt;=&lt;span style="color: #228b22;"&gt;'first derivative'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #228b22;"&gt;'Raman shift (cm$^{-1}$)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #228b22;"&gt;'First derivative'&lt;/span&gt;)
plt.grid()

plt.plot(minmax, d1s(minmax), &lt;span style="color: #228b22;"&gt;'ro '&lt;/span&gt;, &lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;label&lt;/span&gt;=&lt;span style="color: #228b22;"&gt;'zeros'&lt;/span&gt;)
plt.legend(&lt;span style="color: #000000; background-color: #cccccc; font-weight: bold;"&gt;loc&lt;/span&gt;=&lt;span style="color: #228b22;"&gt;'best'&lt;/span&gt;)

plt.plot(w1, i1, &lt;span style="color: #228b22;"&gt;'b. '&lt;/span&gt;)
plt.plot(w1, sp(w1), &lt;span style="color: #228b22;"&gt;'r-'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #228b22;"&gt;'Raman shift (cm$^{-1}$)'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #228b22;"&gt;'Intensity (counts)'&lt;/span&gt;)
plt.plot(minmax, sp(minmax), &lt;span style="color: #228b22;"&gt;'ro '&lt;/span&gt;)

plt.savefig(&lt;span style="color: #228b22;"&gt;'images/raman-4.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; ... ... Roots = [ 1346.4623087   1347.42700893  1348.16689639]
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; [&amp;lt;matplotlib.lines.Line2D object at 0x1106b2dd0&amp;gt;]
&amp;lt;matplotlib.text.Text object at 0x110623910&amp;gt;
&amp;lt;matplotlib.text.Text object at 0x110c0a090&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; [&amp;lt;matplotlib.lines.Line2D object at 0x10b1bacd0&amp;gt;]
&amp;lt;matplotlib.legend.Legend object at 0x1106b2650&amp;gt;
[&amp;lt;matplotlib.lines.Line2D object at 0x1106b2b50&amp;gt;]
[&amp;lt;matplotlib.lines.Line2D object at 0x110698550&amp;gt;]
&amp;lt;matplotlib.text.Text object at 0x110623910&amp;gt;
&amp;lt;matplotlib.text.Text object at 0x110c0a090&amp;gt;
[&amp;lt;matplotlib.lines.Line2D object at 0x110698a10&amp;gt;]
&lt;/pre&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-4.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;



&lt;p&gt;
In the end, we have illustrated how to construct a spline smoothing interpolation function and to find maxima in the function, including generating some initial guesses. There is more art to this than you might like, since you have to judge how much smoothing is enough or too much. With too much, you may smooth peaks out. With too little, noise may be mistaken for peaks.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Summary notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Using org-mode with :session allows a large script to be broken up into mini sections. However, it only seems to work with the default python mode in Emacs, and it does not work with emacs-for-python or the latest python-mode. I also do not really like the output style, e.g. the output from the plotting commands.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2014 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2013/02/27/Peak-finding-in-Raman-spectroscopy.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.7c&lt;/p&gt;
<p>
For several reasons, the Package Menu’s <kbd>f</kbd> key has always flown a bit under the
radar for me. Though the <a href="http://doc.endlessparentheses.com/Fun/package-menu-filter"><code>package-menu-filter</code></a> command is great in principle, in
practice its usefulness falls a little short for several reasons.
</p>

<p>
One reason, which is in no way its own fault, is that Emacs already has great
searching facilities such as <code>isearch</code> or <code>occur</code>. It’s just easier and faster
to fall back on what you know rather than try out something new. This not
exactly something that needs fixing, but it can be improved by focusing the
filter command on doing things what other facilities can’t do.
</p>

<p>
Now you might be thinking, <i>“doesn’t this command filter by package keywords?
Isearch can’t do that.”</i>
</p>

<p>
And that takes us to the second (probably most relevant) reason. The list of
keywords used by packages is <a href="https://lists.gnu.org/archive/html/emacs-devel/2015-04/msg01192.html">an ugly mess</a>. And that’s not something easy to fix.
Before investing too much resource on this never-ending struggle against entropy,
Emacs 25.1 will make a simple improvement that goes a long way. You can filter
multiple comma-separated keywords at once. So, for instance, you can mitigate
the redundancy between the <code>theme</code> and <code>themes</code> keywords by just searching for
<code>theme,themes</code>.
</p>

<p>
Furthermore, sometimes there’s a good improvement available that is completely
orthogonal to the problem you have. Instead of fixing up keywords, we can also
have <code>package-menu-filter</code> offer <i>other</i> features that alternate facilities
don’t &#x2014;preferably one that doesn’t rely on the supernatural cooperation of a
thousand monkeys typing elisp. As of Emacs 25.1, you may now filter packages by
status or by archive, by writing <code>arc:ARCHIVE</code> and <code>status:STATUS</code> respectively
when you invoke the command.
</p>

<p>
Of lesser importance, there was also a third usability issue with the command.
It took a couple of seconds to load every time you invoked it. That,
fortunately, was much simpler to solve, and I’ll even leave it as an exercise to
the reader! 
</p>

<p>
In the following (very streamline) function, place point anywhere you want and
then invoke a single keybind (from <code>emacs -q</code>, your custom keybinds don’t
count). If you do it right, you can improve its speed a hundred-fold. Can you
see how?
</p>

<figure class="highlight"><pre><code class="language-cl" data-lang="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">package-all-keywords</span> <span class="p">()</span>
  <span class="s">"Collect all package keywords"</span>
  <span class="c1">;; `package--mapc' simply calls the lambda on each</span>
  <span class="c1">;; known package. `package-desc--keywords' returns</span>
  <span class="c1">;; the package's list of keywords.</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">key-list</span><span class="p">))</span>
    <span class="p">(</span><span class="nv">package--mapc</span>
     <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">pkg</span><span class="p">)</span>
       <span class="p">(</span><span class="k">setq</span> <span class="nv">key-list</span>
             <span class="p">(</span><span class="nb">append</span> <span class="nv">key-list</span>
                     <span class="p">(</span><span class="nv">package-desc--keywords</span> <span class="nv">pkg</span><span class="p">)))))</span>
    <span class="nv">key-list</span><span class="p">))</span></code></pre></figure>

<p>
Check in again next Monday for the last post on this series, where we talk about
prioritizing your package archives.
</p>

   <p><a href="http://endlessparentheses.com/new-in-emacs-25-1-filtering-by-status-and-archive.html?source=rss#disqus_thread">Comment on this.</a></p>
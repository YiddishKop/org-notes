<h3 id="note-updated-on-2016-10-25">Note: updated on 2016-10-25</h3>

<p>Deep neural networks and Deep Learning are powerful and popular algorithms. And a lot of their success lays in the careful design of the neural network architecture.</p>

<p>I wanted to revisit the history of neural network design in the last few years and in the context of Deep Learning.</p>

<p>For a more in-depth analysis and comparison of all the networks reported here, please see our <a href="https://arxiv.org/abs/1605.07678">recent article</a>. One representative figure from this article is here:</p>

<p><img src="/assets/nets/acc_vs_net_vs_ops.svg" alt="" /></p>

<p>Reporting top-1 one-crop accuracy versus amount of operations required for a single forward pass in multiple popular neural network architectures.</p>

<h1 id="lenet5">LeNet5</h1>
<p>It is the year 1994, and this is one of the very first convolutional neural networks, and what propelled the field of Deep Learning. This pioneering work by Yann LeCun was named <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf">LeNet5</a> after many previous successful iterations since they year 1988!</p>

<p><img src="/assets/nets/lenet5.jpg" alt="" /></p>

<p>The LeNet5 architecture was fundamental, in particular the insight that image features are distributed across the entire image, and convolutions with learnable parameters are an effective way to extract similar features at multiple location with few parameters. At the time there was no GPU to help training, and even CPUs were slow. Therefore being able to save parameters and computation was a key advantage. This is in contrast to using each pixel as a separate input of a large multi-layer neural network. LeNet5 explained that those should not be used in the first layer, because images are highly spatially correlated, and using individual pixel of the image as separate input features would not take advantage of these correlations.</p>

<p>LeNet5 features can be summarized as:</p>

<ul>
  <li>
    <p>convolutional neural network use sequence of 3 layers: convolution, pooling, non-linearity –&gt; This may be the key feature of Deep Learning for images since this paper!</p>
  </li>
  <li>
    <p>use convolution to extract spatial features</p>
  </li>
  <li>
    <p>subsample using spatial average of maps</p>
  </li>
  <li>
    <p>non-linearity in the form of tanh or sigmoids</p>
  </li>
  <li>
    <p>multi-layer neural network (MLP) as final classifier</p>
  </li>
  <li>
    <p>sparse connection matrix between layers to avoid large computational cost</p>
  </li>
</ul>

<p>In overall this network was the origin of much of the recent architectures, and a true inspiration for many people in the field.</p>

<h1 id="the-gap">The gap</h1>
<p>In the years from 1998 to 2010 neural network were in incubation. Most people did not notice their increasing power, while many other researchers slowly progressed. More and more data was available because of the rise of cell-phone cameras and cheap digital cameras. And computing power was on the rise, CPUs were becoming faster, and GPUs became a general-purpose computing tool. Both of these trends made neural network progress, albeit at a slow rate. Both data and computing power made the tasks that neural networks tackled more and more interesting. And then it became clear…</p>

<h1 id="dan-ciresan-net">Dan Ciresan Net</h1>
<p>In 2010 Dan Claudiu Ciresan and Jurgen Schmidhuber published one of the very fist implementations of <a href="http://arxiv.org/abs/1003.0358">GPU Neural nets</a>. This implementation had both forward and backward implemented on a a <a href="http://www.geforce.com/hardware/desktop-gpus/geforce-gtx-280">NVIDIA GTX 280</a> graphic processor of an up to 9 layers neural network.</p>

<h1 id="alexnet">AlexNet</h1>
<p>In 2012, Alex Krizhevsky released <a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf">AlexNet</a>
which was a deeper and much wider version of the LeNet and won by a large margin the difficult ImageNet competition.</p>

<p><img src="/assets/nets/alexnet_small.png" alt="" /></p>

<p>AlexNet scaled the insights of LeNet into a much larger neural network that could be used to learn much more complex objects and object hierarchies.
The contribution of this work were:</p>

<ul>
  <li>
    <p>use of rectified linear units (ReLU) as non-linearities</p>
  </li>
  <li>
    <p>use of dropout technique to selectively ignore single neurons during training, a way to avoid overfitting of the model</p>
  </li>
  <li>
    <p>overlapping max pooling, avoiding the averaging effects of average pooling</p>
  </li>
  <li>
    <p>use of GPUs <a href="http://www.geforce.com/hardware/desktop-gpus/geforce-gtx-580/specifications">NVIDIA GTX 580</a> to reduce training time</p>
  </li>
</ul>

<p>At the time GPU offered a much larger number of cores than CPUs, and allowed 10x faster training time, which in turn allowed to use larger datasets and also bigger images.</p>

<p>The success of AlexNet started a small revolution. Convolutional neural network were now the workhorse of Deep Learning, which became the new name for “large neural networks that can now solve useful tasks”.</p>

<h1 id="overfeat">Overfeat</h1>
<p>In December 2013 the NYU lab from Yann LeCun came up with <a href="http://arxiv.org/abs/1312.6229">Overfeat</a>, which is a derivative of AlexNet. The article also proposed learning bounding boxes, which later gave rise to many other papers on the same topic. I believe it is better to learn to segment objects rather than learn artificial bounding boxes.</p>

<h1 id="vgg">VGG</h1>
<p>The <a href="http://arxiv.org/abs/1409.1556">VGG networks</a> from Oxford were the first to use much smaller 3×3 filters in each convolutional layers and also combined them as a sequence of convolutions.</p>

<p>This seems to be contrary to the principles of LeNet, where large convolutions were used to capture similar features in an image. Instead of the 9×9 or 11×11 filters of AlexNet, filters started to become smaller, too dangerously close to the infamous 1×1 convolutions that LeNet wanted to avoid, at least on the first layers of the network. But the great advantage of VGG was the insight that multiple 3×3 convolution in sequence can emulate the effect of larger receptive fields, for examples 5×5 and 7×7. These ideas will be also used in more recent network architectures as Inception and ResNet.</p>

<p><img src="/assets/nets/vgg.jpg" alt="" /></p>

<p>The VGG networks uses multiple 3x3 convolutional layers to represent complex features. Notice blocks 3, 4, 5 of VGG-E: 256×256 and 512×512 3×3 filters are used multiple times in sequence to extract more complex features and the combination of such features. This is effectively like having large 512×512 classifiers with 3 layers, which are convolutional! This obviously amounts to a massive number of parameters, and also learning power. But training of these network was difficult, and had to be split into smaller networks with layers added one by one. All this because of the lack of strong ways to regularize the model, or to somehow restrict the massive search space promoted by the large amount of parameters.</p>

<p>VGG used large feature sizes in many layers and thus inference was quite <a href="http://arxiv.org/abs/1605.07678">costly at run-time</a>. Reducing the number of features, as done in Inception bottlenecks, will save some of the computational cost.</p>

<h1 id="network-in-network">Network-in-network</h1>
<p><a href="https://arxiv.org/abs/1312.4400">Network-in-network</a> (NiN) had the great and simple insight of using 1x1 convolutions to provide more combinational power to the features of a convolutional layers.</p>

<p>The NiN architecture used spatial MLP layers after each convolution, in order to better combine features before another layer. Again one can think the 1x1 convolutions are against the original principles of LeNet, but really they instead help to combine convolutional features in a better way, which is not possible by simply stacking more convolutional layers. This is different from using raw pixels as input to the next layer. Here 1×1 convolution are used to spatially combine features across features maps after convolution, so they effectively use very few parameters, shared across all pixels of these features!</p>

<p><img src="/assets/nets/nin.jpg" alt="" /></p>

<p>The power of MLP can greatly increase the effectiveness of individual convolutional features by combining them into more complex groups. This idea will be later used in most recent architectures as ResNet and Inception and derivatives.</p>

<p>NiN also used an average pooling layer as part of the last classifier, another practice that will become common. This was done to average the response of the network to multiple are of the input image before classification.</p>

<h1 id="googlenet-and-inception">GoogLeNet and Inception</h1>
<p>Christian Szegedy from Google begun a quest aimed at reducing the computational burden of deep neural networks, and devised the <a href="https://arxiv.org/abs/1409.4842">GoogLeNet the first Inception architecture</a>.</p>

<p>By now, Fall 2014, deep learning models were becoming extermely useful in categorizing the content of images and video frames. Most skeptics had given in that Deep Learning and neural nets came back to stay this time. Given the usefulness of these techniques, the internet giants like Google were very interested in efficient and large deployments of architectures on their server farms.</p>

<p>Christian thought a lot about ways to reduce the computational burden of deep neural nets while obtaining state-of-art performance (on ImageNet, for example). Or be able to keep the computational cost the same, while offering improved performance.</p>

<p>He and his team came up with the Inception module: <img src="/assets/nets/inceptionv1.jpg" alt="" /></p>

<p>which at a first glance is basically the parallel combination of 1×1, 3×3, and 5×5 convolutional filters. But the great insight of the inception module was the use of 1×1 convolutional blocks (NiN) to reduce the number of features before the expensive parallel blocks. This is commonly referred as “bottleneck”. This deserves its own section to explain: see “bottleneck layer” section below.</p>

<p>GoogLeNet used a stem without inception modules as initial layers, and an average pooling plus softmax classifier similar to NiN. This classifier is also extremely low number of operations, compared to the ones of AlexNet and VGG. This also contributed to a <a href="http://arxiv.org/abs/1605.07678">very efficient network design</a>.</p>

<h1 id="bottleneck-layer">Bottleneck layer</h1>

<p>Inspired by NiN, the bottleneck layer of Inception was reducing the number of features, and thus operations, at each layer, so the inference time could be kept low. Before passing data to the expensive convolution modules, the number of features was reduce by, say, 4 times. This led to large savings in computational cost, and the success of this architecture.</p>

<p>Let’s examine this in detail. Let’s say you have 256 features coming in, and 256 coming out, and let’s say the Inception layer only performs 3x3 convolutions. That is 256x256 x 3x3 convolutions that have to be performed (589,000s multiply-accumulate, or MAC operations). That may be more than the computational budget we have, say, to run this layer in 0.5 milli-seconds on a Google Server. Instead of doing this, we decide to reduce the number of features that will have to be convolved, say to 64 or 256/4. In this case, we first perform 256 -&gt; 64 1×1 convolutions, then 64 convolution on all Inception branches, and then we use again a 1x1 convolution from 64 -&gt; 256 features back again. The operations are now:</p>

<ul>
  <li>256×64 × 1×1 = 16,000s</li>
  <li>64×64 × 3×3 = 36,000s</li>
  <li>64×256 × 1×1 = 16,000s</li>
</ul>

<p>For a total of about 70,000 versus the almost 600,000 we had before. Almost 10x less operations!</p>

<p>And although we are doing less operations, we are not losing generality in this layer. In fact the bottleneck layers have been proven to perform at state-of-art on the ImageNet dataset, for example, and will be also used in later architectures such as ResNet.</p>

<p>The reason for the success is that the input features are correlated, and thus redundancy can be removed by combining them appropriately with the 1x1 convolutions. Then, after convolution with a smaller number of features, they can be expanded again into meaningful combination for the next layer.</p>

<h1 id="inception-v3-and-v2">Inception V3 (and V2)</h1>
<p>Christian and his team are very efficient researchers. In February 2015 <a href="http://arxiv.org/abs/1502.03167">Batch-normalized Inception</a> was introduced as Inception V2. Batch-normalization computes the mean and standard-deviation of all feature maps at the output of a layer, and normalizes their responses with these values. This corresponds to “whitening” the data, and thus making all the neural maps have responses in the same range, and with zero mean. This helps training as the next layer does not have to learn offsets in the input data, and can focus on how to best combine features.</p>

<p>In December 2015 they released a <a href="http://arxiv.org/abs/1512.00567">new version of the Inception modules and the corresponding architecture</a>
This article better explains the original GoogLeNet architecture, giving a lot more detail on the design choices. A list of the original ideas are:</p>

<ul>
  <li>
    <p>maximize information flow into the network, by carefully constructing networks that balance depth and width. Before each pooling, increase the feature maps.</p>
  </li>
  <li>
    <p>when depth is increased, the number of features, or width of the layer is also increased systematically</p>
  </li>
  <li>
    <p>use width increase at each layer to increase the combination of features before next layer</p>
  </li>
  <li>
    <p>use only 3x3 convolution, when possible, given that filter of 5x5 and 7x7 can be decomposed with multiple 3x3. See figure: <img src="/assets/nets/miniconv.jpg" alt="" /></p>
  </li>
  <li>
    <p>the new inception module thus becomes: <img src="/assets/nets/inceptionv3.jpg" alt="" /></p>
  </li>
  <li>
    <p>filters can also be decomposed by <a href="http://arxiv.org/abs/1412.5474">flattened convolutions</a> into more complex modules: <img src="/assets/nets/inceptionv3s.jpg" alt="" /></p>
  </li>
  <li>
    <p>inception modules can also decrease the size of the data by provide pooling while performing the inception computation. This is basically identical to performing a convolution with strides in parallel with a simple pooling layer: <img src="/assets/nets/inceptionv3pool.jpg" alt="" /></p>
  </li>
</ul>

<p>Inception still uses a pooling layer plus softmax as final classifier.</p>

<h1 id="resnet">ResNet</h1>
<p>The revolution then came in December 2015, at about the same time as Inception v3.
<a href="https://arxiv.org/abs/1512.03385">ResNet</a> have a simple ideas: feed the output of two successive convolutional layer AND also bypass the input to the next layers!</p>

<p><img src="/assets/nets/resnetb.jpg" alt="" /></p>

<p>This is similar to older ideas like <a href="http://yann.lecun.com/exdb/publis/pdf/sermanet-ijcnn-11.pdf">this one</a>. But here they bypass TWO layers and are applied to large scales. Bypassing after 2 layers is a key intuition, as bypassing a single layer did not give much improvements. By 2 layers can be thought as a small classifier, or a Network-In-Network!</p>

<p>This is also the very first time that a network of &gt; hundred, even 1000 layers was trained.</p>

<p>ResNet with a large number of layers started to use a bottleneck layer similar to the Inception bottleneck:</p>

<p><img src="/assets/nets/resnetbottleneck.jpg" alt="" /></p>

<p>This layer reduces the number of features at each layer by first using a 1x1 convolution with a smaller output (usually 1/4 of the input), and then a 3x3 layer, and then again a 1x1 convolution to a larger number of features. Like in the case of Inception modules, this allows to keep the computation low, while providing rich combination of features. See “bottleneck layer” section after “GoogLeNet and Inception”.</p>

<p>ResNet uses a fairly simple initial layers at the input (stem): a 7x7 conv layer followed with a pool of 2. Contrast this to more complex and less intuitive stems as in Inception V3, V4.</p>

<p>ResNet also uses a pooling layer plus softmax as final classifier.</p>

<p>Additional insights about the ResNet architecture are appearing every day:</p>

<ul>
  <li>
    <p>ResNet can be seen as both parallel and serial modules, by just thinking of the inout as going to many modules in parallel, while the output of each modules connect in series</p>
  </li>
  <li>
    <p>ResNet can also be thought as <a href="http://arxiv.org/abs/1605.06431">multiple ensembles of parallel or serial modules</a></p>
  </li>
  <li>
    <p>it has been found that ResNet usually operates on blocks of relatively low depth ~20-30 layers, which act in parallel, rather than serially flow the entire length of the network.</p>
  </li>
  <li>
    <p>ResNet, when the output is fed back to the input, as in RNN, the network can be seen as a better <a href="https://arxiv.org/abs/1604.03640">bio-plausible model of the cortex</a></p>
  </li>
</ul>

<h1 id="inception-v4">Inception V4</h1>
<p>And Christian and team are at it again with a <a href="http://arxiv.org/abs/1602.07261">new version of Inception</a>.</p>

<p>The Inception module after the stem is rather similar to Inception V3: <img src="/assets/nets/inceptionv4a.jpg" alt="" /></p>

<p>They also combined the Inception module with the ResNet module: <img src="/assets/nets/inceptionv4b.jpg" alt="" /></p>

<p>This time though the solution is, in my opinion, less elegant and more complex, but also full of less transparent heuristics. It is hard to understand the choices and it is also hard for the authors to justify them.</p>

<p>In this regard the prize for a clean and simple network that can be easily understood and modified now goes to ResNet.</p>

<h1 id="squeezenet">SqueezeNet</h1>
<p><a href="http://arxiv.org/abs/1602.07360">SqueezeNet</a> has been recently released. It is a re-hash of many concepts from ResNet and Inception, and show that after all, a better design of architecture will deliver small network sizes and parameters without needing complex compression algorithms.</p>

<h1 id="enet">ENet</h1>
<p>Our team set up to combine all the features of the recent architectures into a very efficient and light-weight network that uses very few parameters and computation to achieve state-of-the-art results. This network architecture is dubbed <a href="https://arxiv.org/abs/1606.02147">ENet</a>, and was designed by <a href="https://apaszke.github.io/posts.html">Adam Paszke</a>. We have used it to perform pixel-wise labeling and scene-parsing. Here are <a href="https://www.youtube.com/watch?v=3jq4FnO5Nco&amp;list=PLNgy4gid0G9c4qiVBrERE_5v_b1pu-5pQ">some videos of ENet in action</a>. These videos are not part of the <a href="https://www.cityscapes-dataset.com/">training dataset</a>.</p>

<p><a href="https://arxiv.org/abs/1606.02147">The technical report on ENet is available here</a>. ENet is a encoder plus decoder network. The encoder is a regular CNN design for categorization, while the decoder is a upsampling network designed to propagate the categories back into the original image size for segmentation. This worked used only neural networks, and no other algorithm to perform image segmentation.</p>

<p><img src="/assets/nets/acc_dens_vs_net.svg" alt="" /></p>

<p>As you can see in this figure ENet has the highest accuracy per parameter used of any neural network out there!</p>

<p>ENet was designed to use the minimum number of resources possible from the start. As such it achieves such a small footprint that both encoder and decoder network together only occupies 0.7 MB with fp16 precision. 
Even at this small size, ENet is similar or above other pure neural network solutions in accuracy of segmentation.</p>

<h1 id="an-analysis-of-modules">An analysis of modules</h1>
<p>A systematic evaluation of CNN modules <a href="https://arxiv.org/abs/1606.02228">has been presented</a>. The found out that is advantageous to use:</p>

<p>• use ELU non-linearity without batchnorm or ReLU with it.</p>

<p>• apply a learned colorspace transformation of RGB.</p>

<p>• use the linear learning rate decay policy.</p>

<p>• use a sum of the average and max pooling layers.</p>

<p>• use mini-batch size around 128 or 256. If this is too big for your GPU, decrease the learning rate proportionally to the batch size.</p>

<p>• use fully-connected layers as convolutional and average the predictions for the final decision.</p>

<p>• when investing in increasing training set size, check if a plateau has not been reach.
• cleanliness of the data is more important then the size.</p>

<p>• if you cannot increase the input image size, reduce the stride in the con-
sequent layers, it has roughly the same effect.</p>

<p>• if your network has a complex and highly optimized architecture, like e.g.
GoogLeNet, be careful with modifications.</p>

<h1 id="xception">Xception</h1>

<p><a href="https://arxiv.org/abs/1610.02357">Xception</a> improves on the inception module and architecture with a simple and more elegant architecture that is as effective as ResNet and Inception V4.</p>

<p>The Xception module is presented here:</p>

<p><img src="/assets/nets/xception.jpg" alt="" /></p>

<p>This network can be anyone’s favorite given the simplicity and elegance of the architecture, presented here:</p>

<p><img src="/assets/nets/xception-net.jpg" alt="" /></p>

<p>The architecture has 36 convolutional stages, making it close in similarity to a ResNet-34. But the model and code is as simple as ResNet and much more comprehensible than Inception V4.</p>

<p>A Torch7 implementation of this network is available <a href="https://gist.github.com/culurciello/554c8e56d3bbaf7c66bf66c6089dc221">here</a>
An implementation in Keras/TF is availble <a href="https://keras.io/applications/#xception">here</a>.</p>

<p>It is interesting to note that the recent Xception architecture was also inspired by <a href="https://arxiv.org/abs/1412.5474">our work on separable convolutional filters</a>.</p>

<h1 id="other-notable-architectures">Other notable architectures</h1>

<p><a href="https://arxiv.org/abs/1605.07648">FractalNet</a> uses a recursive architecture, that was not tested on ImageNet, and is a derivative or the more general ResNet.</p>

<h1 id="the-future">The future</h1>
<p>We believe that crafting neural network architectures is of paramount importance for the progress of the Deep Learning field. Our group highly recommends reading carefully and understanding all the papers in this post.</p>

<p>But one could now wonder why we have to spend so much time in crafting architectures, and why instead we do not use data to tell us what to use, and how to combine modules. This would be nice, but now it is work in progress. Some initial interesting results are <a href="https://arxiv.org/abs/1606.06216">here</a>.</p>

<p>Note also that here we mostly talked about architectures for computer vision. Similarly neural network architectures developed in other areas, and it is interesting to study the evolution of architectures for all other tasks also.</p>

<p>If you are interested in a comparison of neural network architecture and computational performance, see <a href="http://arxiv.org/abs/1605.07678">our recent paper</a>.</p>

<h1 id="acknowledgments">Acknowledgments</h1>
<p>This post was inspired by discussions with Abhishek Chaurasia, Adam Paszke, Sangpil Kim, Alfredo Canziani and others in our e-Lab at Purdue University.</p>

<p>
If you’ve been following our journey of typography, you must now have <a href="/prettify-you-apostrophes.html">pretty
apostrophes</a> all over your org documents. But if that’s the case, you probably
also noticed a drawback. Ispell doesn’t like them very much. Now how are we
supposed to use our amazing <a href="/ispell-and-abbrev-the-perfect-auto-correct.html">auto-correct</a>?
</p>

<p>
Don’t despair, dear reader, I have the solution. It wasn’t trivial to come up
with, but it’s quite simple to understand.
</p>

<ol class="org-ol">
<li>Tell Ispell that apostrophes are just like hard-quotes, where it comes
to constituting a word.
</li>
<li>Convert all ’ to ' as they’re being sent to the Aspell subprocess.
</li>
<li>Convert them back when reading the subprocess output. We even take care to
only do that in <code>org-mode</code>, so that it won’t get in the way of your LaTeX
buffers.
</li>
</ol>

<p>
The following code uses the new advice system in Emacs 24.4. It can certainly be
made to work on older Emacs by changing it to use <a href="http://doc.endlessparentheses.com/Fun/defadvice"><code>defadvice</code></a>.
</p>
<figure class="highlight"><pre><code class="language-cl" data-lang="cl"><span class="p">(</span><span class="nb">require</span> <span class="ss">'ispell</span><span class="p">)</span>

<span class="c1">;;; Tell ispell.el that ’ can be part of a word.</span>
<span class="p">(</span><span class="k">setq</span> <span class="nv">ispell-local-dictionary-alist</span>
      <span class="o">`</span><span class="p">((</span><span class="no">nil</span> <span class="s">"[[:alpha:]]"</span> <span class="s">"[^[:alpha:]]"</span>
             <span class="s">"['\x2019]"</span> <span class="no">nil</span> <span class="p">(</span><span class="s">"-B"</span><span class="p">)</span> <span class="no">nil</span> <span class="nv">utf-8</span><span class="p">)))</span>

<span class="c1">;;; Don't send ’ to the subprocess.</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">endless/replace-apostrophe</span> <span class="p">(</span><span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
         <span class="s">"’"</span> <span class="s">"'"</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">args</span><span class="p">))</span>
        <span class="p">(</span><span class="nb">cdr</span> <span class="nv">args</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">advice-add</span> <span class="nf">#'</span><span class="nv">ispell-send-string</span> <span class="ss">:filter-args</span>
            <span class="nf">#'</span><span class="nv">endless/replace-apostrophe</span><span class="p">)</span>

<span class="c1">;;; Convert ' back to ’ from the subprocess.</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">endless/replace-quote</span> <span class="p">(</span><span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">derived-mode-p</span> <span class="ss">'org-mode</span><span class="p">))</span>
      <span class="nv">args</span>
    <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
           <span class="s">"'"</span> <span class="s">"’"</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">args</span><span class="p">))</span>
          <span class="p">(</span><span class="nb">cdr</span> <span class="nv">args</span><span class="p">))))</span>
<span class="p">(</span><span class="nv">advice-add</span> <span class="nf">#'</span><span class="nv">ispell-parse-output</span> <span class="ss">:filter-args</span>
            <span class="nf">#'</span><span class="nv">endless/replace-quote</span><span class="p">)</span></code></pre></figure>
<p>
This is, admittedly, a hacky solution. But it’s been working well for me for the
last few weeks. Feel free to shout and scream at me if you run into issues.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2015-05-18 Mon&gt;</span></span></h2>
<div class="outline-text-2" id="text-1">
<p>
Fixed the third regexp.</p>
</div>
</div>

   <p><a href="http://endlessparentheses.com/ispell-and-apostrophes.html?source=rss#disqus_thread">Comment on this.</a></p>
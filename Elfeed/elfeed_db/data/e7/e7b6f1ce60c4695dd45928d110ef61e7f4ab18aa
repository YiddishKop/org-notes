


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org4d40e92"&gt;1. A colored link with a static tooltip.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1bc1061"&gt;2. A colored link with a static tooltip and no folding.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1c56ce9"&gt;3. A dynamic tooltip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc074278"&gt;4. A better file link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc12de23"&gt;5. A link with a new keymap.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org479a559"&gt;6. A completion example with a dynamic face for validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6b336b6"&gt;7. A store link example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org069cbfa"&gt;8. An activate-func example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Org 9.0 is finally out, and it comes with a totally overhauled link capability! This post documents some of those capabilities. These new capabilities include support for:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Custom link faces&lt;/li&gt;
&lt;li&gt;Custom tooltips on links&lt;/li&gt;
&lt;li&gt;More consistent interface for completion&lt;/li&gt;
&lt;li&gt;Special keymaps on links&lt;/li&gt;
&lt;li&gt;Customized folding of bracketed links&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This post will make more sense with this video: &lt;a href="https://www.youtube.com/watch?v=5haX95nk02E"&gt;https://www.youtube.com/watch?v=5haX95nk02E&lt;/a&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5haX95nk02E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;div id="outline-container-org4d40e92" class="outline-2"&gt;
&lt;h2 id="org4d40e92"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; A colored link with a static tooltip.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
All links in elisp are now defined with org-link-set-parameters.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path) (message &lt;span style="color: #008000;"&gt;"You clicked me."&lt;/span&gt;))
 &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path desc backend)
           (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
            ((eq 'html backend)
             (format &lt;span style="color: #008000;"&gt;"&amp;lt;font color=\"red\"&amp;gt;%s&amp;lt;/font&amp;gt;"&lt;/span&gt;
                     (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; desc path)))))
 &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;)
 &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Click me for a message."&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A &lt;font color="red"&gt;link&lt;/font&gt; that is colored red.  In bracketed form:  A &lt;font color="red"&gt;link with a description&lt;/font&gt;.                   
&lt;/p&gt;

&lt;p&gt;
You can change a parameter like this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:underline&lt;/span&gt; t))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A &lt;font color="red"&gt;link&lt;/font&gt; that is colored red and underlined.
&lt;/p&gt;

&lt;p&gt;
You can use any face for a link. Here we define one and use it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defface&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;org-link-green&lt;/span&gt;
  '((t (&lt;span style="color: #006FE0;"&gt;:inherit&lt;/span&gt; org-link &lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"green"&lt;/span&gt;)))
  &lt;span style="color: #036A07;"&gt;"A green link."&lt;/span&gt;)

(org-link-set-parameters
   &lt;span style="color: #008000;"&gt;"green"&lt;/span&gt;
   &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path) (message &lt;span style="color: #008000;"&gt;"You clicked me."&lt;/span&gt;))
   &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path desc backend)
     (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
      ((eq 'html backend)
       (format &lt;span style="color: #008000;"&gt;"&amp;lt;font color=\"green\"&amp;gt;%s&amp;lt;/font&amp;gt;"&lt;/span&gt;
               (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; desc path)))))
   &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; 'org-link-green
   &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Click me for a message."&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A &lt;font color="green"&gt;link&lt;/font&gt; works.        
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1bc1061" class="outline-2"&gt;
&lt;h2 id="org1bc1061"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; A colored link with a static tooltip and no folding.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This link will be shown in full unfolded form even when other links are folded in descriptive format.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"red-full"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path) (message &lt;span style="color: #008000;"&gt;"You clicked me."&lt;/span&gt;))
 &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path desc backend)
           (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
            ((eq 'html backend)
             (format &lt;span style="color: #008000;"&gt;"&amp;lt;font color=\"red\"&amp;gt;%s&amp;lt;/font&amp;gt;"&lt;/span&gt;
                     (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; desc path)))))
 &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;)
 &lt;span style="color: #006FE0;"&gt;:display&lt;/span&gt; 'full
 &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Click me for a message."&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A &lt;font color="red"&gt;link&lt;/font&gt; that is colored red.  In bracketed form:  A &lt;font color="red"&gt;link with a description&lt;/font&gt;.  This regular &lt;a href="http://dx.doi.org/test"&gt;bracketed doi&lt;/a&gt; is still folded.   
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1c56ce9" class="outline-2"&gt;
&lt;h2 id="org1c56ce9"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; A dynamic tooltip&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
You can make tooltips dynamic. The function must take these arguments (window object position), and construct the tooltip from that information. Here we show what the cursor is on and the point that it is on. \(x^2\)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;redd-tip&lt;/span&gt; (window object position)
  (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
    (goto-char position)
    (goto-char (org-element-property &lt;span style="color: #006FE0;"&gt;:begin&lt;/span&gt; (org-element-context)))
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt; ((looking-at org-plain-link-re)
           (format &lt;span style="color: #008000;"&gt;"Looking at %s with mouse at %s"&lt;/span&gt; (match-string 0) position))
          ((looking-at org-bracket-link-regexp)
           (format &lt;span style="color: #008000;"&gt;"Looking at %s in a bracketed link with mouse at %s"&lt;/span&gt;
                   (match-string 0) position))
          (t
           &lt;span style="color: #008000;"&gt;"No match"&lt;/span&gt;))))

(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"redd"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; '(&lt;span style="color: #006FE0;"&gt;:underline&lt;/span&gt; t)
 &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; 'redd-tip)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
A link with a dynamic tooltip: &lt;a href="link"&gt;link&lt;/a&gt; or this one &lt;a href="another-link"&gt;another-link&lt;/a&gt;     &lt;a href="test"&gt;bracketed redd&lt;/a&gt;             
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc074278" class="outline-2"&gt;
&lt;h2 id="orgc074278"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; A better file link&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Say you want to get a menu of options for file links. For example to find the file, open it in dired, copy the link, etc&amp;#x2026; We use helm here to make that happen.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"file"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path)
           (funcall
            (helm &lt;span style="color: #006FE0;"&gt;:sources&lt;/span&gt;
                  `((name . &lt;span style="color: #008000;"&gt;"Action"&lt;/span&gt;)
                    (candidates . ,(append
                                    (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for f in '(find-file
                                                     org-open-file)
                                          collect (cons (symbol-name f) f))
                                    '((&lt;span style="color: #008000;"&gt;"dired"&lt;/span&gt; . (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path)
                                                   (dired (file-name-directory path))
                                                   (re-search-forward (file-name-nondirectory path))))
                                      (&lt;span style="color: #008000;"&gt;"copy org link"&lt;/span&gt; . (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path)
                                                           (kill-new (format &lt;span style="color: #008000;"&gt;"[[file:%s]]"&lt;/span&gt; path)))))))
                    (action . identity)))
            path)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/hy-test.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc12de23" class="outline-2"&gt;
&lt;h2 id="orgc12de23"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; A link with a new keymap.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
To get a special keymap, we have to create a new keymap. We can make a copy of org-mouse-map and add new keys to it that are specific to this link. With this link, you can use arrow-keys with a modifier key to jump between links. We define C-left and C-right to go to the previous and next links, and for fun a C-up and super-mouse-1 bindings that are in effect only on the links.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;prev-link&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (re-search-backward &lt;span style="color: #008000;"&gt;"keym:"&lt;/span&gt; nil t))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;next-link&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (re-search-forward &lt;span style="color: #008000;"&gt;"keym:"&lt;/span&gt; nil t))

(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"keym"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path)
           (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
           (message &lt;span style="color: #008000;"&gt;"You followed me."&lt;/span&gt;))
 &lt;span style="color: #006FE0;"&gt;:keymap&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (copy-keymap org-mouse-map)))
           (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-&amp;lt;left&amp;gt;"&lt;/span&gt;) 'prev-link)
           (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-&amp;lt;right&amp;gt;"&lt;/span&gt;) 'next-link)
           (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-&amp;lt;up&amp;gt;"&lt;/span&gt;)
             (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
               (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)(message-box &lt;span style="color: #008000;"&gt;"special C-up"&lt;/span&gt;)))
           (define-key map [s-mouse-1]
             (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
               (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
               (message-box &lt;span style="color: #008000;"&gt;"s-Followed"&lt;/span&gt;)))
           map))
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
&lt;a href="one"&gt;one&lt;/a&gt;  then &lt;a href="two"&gt;two&lt;/a&gt; and finally &lt;a href="three"&gt;three&lt;/a&gt;                  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org479a559" class="outline-2"&gt;
&lt;h2 id="org479a559"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; A completion example with a dynamic face for validation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
This example shows how to add a completion function, and use a dynamic face to show when a bad link has been made (in this case there are 4 allowed fruits, and anything else should be red.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;my-comp&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; arg)
  (format &lt;span style="color: #008000;"&gt;"fruit:%s"&lt;/span&gt;
          (completing-read &lt;span style="color: #008000;"&gt;"Choose a fruit: "&lt;/span&gt; '(&lt;span style="color: #008000;"&gt;"apple"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"orange"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"grapes"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"kiwi"&lt;/span&gt;))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;fruit-link-face&lt;/span&gt; (path)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (member path '(&lt;span style="color: #008000;"&gt;"apple"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"orange"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"grapes"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"kiwi"&lt;/span&gt;))
      'org-link
    '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;)))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;fruit-tooltip&lt;/span&gt; (_win _obj position)
  (&lt;span style="color: #0000FF;"&gt;save-match-data&lt;/span&gt;
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (goto-char position)
      (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((path (org-element-property &lt;span style="color: #006FE0;"&gt;:path&lt;/span&gt; (org-element-context))))
        (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (member path '(&lt;span style="color: #008000;"&gt;"apple"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"orange"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"grapes"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"kiwi"&lt;/span&gt;))
            &lt;span style="color: #008000;"&gt;"A fruit"&lt;/span&gt;
          (format &lt;span style="color: #008000;"&gt;"%s: Illegal value. Must be one of apple, orange, grapes or kiwi."&lt;/span&gt;
                  path))))))

(org-link-set-parameters &lt;span style="color: #008000;"&gt;"fruit"&lt;/span&gt;             
                         &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; 'fruit-tooltip
                         &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; 'fruit-link-face
                         &lt;span style="color: #006FE0;"&gt;:complete&lt;/span&gt; 'my-comp)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
&lt;a href="apple"&gt;apple&lt;/a&gt;      &lt;a href="orange"&gt;an orange in brackets&lt;/a&gt;             
&lt;/p&gt;

&lt;p&gt;
a bad &lt;a href="grapefruit"&gt;grapefruit&lt;/a&gt;.        &lt;a href="kiwi"&gt;kiwi&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
&lt;a href="kiwi"&gt;kiwi&lt;/a&gt;  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b336b6" class="outline-2"&gt;
&lt;h2 id="org6b336b6"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; A store link example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
&lt;a href="*A%20store%20link%20example"&gt;A store link example&lt;/a&gt;
Put your  cursor on a headline, and type C-c l. Then move it and type C-c C-l to insert the link.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;store-my-headline&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (eq major-mode 'org-mode)
             (org-at-heading-p))
    (org-store-link-props
     &lt;span style="color: #006FE0;"&gt;:type&lt;/span&gt; &lt;span style="color: #008000;"&gt;"head"&lt;/span&gt;
     &lt;span style="color: #006FE0;"&gt;:link&lt;/span&gt; (format &lt;span style="color: #008000;"&gt;"head:*%s"&lt;/span&gt; (nth 4 (org-heading-components)))
     &lt;span style="color: #006FE0;"&gt;:description&lt;/span&gt; (nth 4 (org-heading-components)))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;follow-head&lt;/span&gt; (path)
  (org-open-link-from-string (format &lt;span style="color: #008000;"&gt;"[[%s]]"&lt;/span&gt; path)))

(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"head"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; 'follow-head &lt;span style="color: #006FE0;"&gt;:store&lt;/span&gt; 'store-my-headline)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org069cbfa" class="outline-2"&gt;
&lt;h2 id="org069cbfa"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; An activate-func example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
You may want to do some additional things when a link is activated. For example, maybe it makes sense for different parts of the link to have different actions,  or colors. Here is an example where we make an rgb link of three numbers, and color each number, and make the link color dynamic.
&lt;/p&gt;

&lt;p&gt;
We make a keymap so C-up increments a color, and C-down decrements a color.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;color&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;rgb-face&lt;/span&gt; (path)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((f (split-string path &lt;span style="color: #008000;"&gt;","&lt;/span&gt;))
         (red (/ (string-to-number (nth 0 f)) 255.0))
         (green (/ (string-to-number (nth 1 f)) 255.0))
         (blue (/ (string-to-number (nth 2 f)) 255.0))
         (hex (color-rgb-to-hex red green blue)))
    (list &lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; hex)))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;rgb-func&lt;/span&gt; (start end path bracketp) 
  (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
    (goto-char start)
    (&lt;span style="color: #0000FF;"&gt;save-match-data&lt;/span&gt;
      (&lt;span style="color: #0000FF;"&gt;cl-loop&lt;/span&gt; for num in (split-string path &lt;span style="color: #008000;"&gt;","&lt;/span&gt;)
               for face in (list '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"red"&lt;/span&gt;)
                                 '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"green"&lt;/span&gt;)
                                 '(&lt;span style="color: #006FE0;"&gt;:foreground&lt;/span&gt; &lt;span style="color: #008000;"&gt;"blue"&lt;/span&gt;))
               do
               (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt;
                 (re-search-forward num end t)
                 (add-text-properties
                  (match-beginning 0)
                  (match-end 0)
                  (list 'face face)))))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;ninc&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (skip-chars-backward &lt;span style="color: #008000;"&gt;"0-9"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (looking-at &lt;span style="color: #008000;"&gt;"[0-9]+"&lt;/span&gt;)
      (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"No number at point"&lt;/span&gt;))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;NINC&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((link (org-element-context))
         (path (org-element-property &lt;span style="color: #006FE0;"&gt;:path&lt;/span&gt; link))
         (beg (org-element-property &lt;span style="color: #006FE0;"&gt;:begin&lt;/span&gt; link))
         (end (org-element-property &lt;span style="color: #006FE0;"&gt;:end&lt;/span&gt; link))
         (rgb (mapcar 'string-to-number (split-string path &lt;span style="color: #008000;"&gt;","&lt;/span&gt;))))
    (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; rgb (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (+ x 10)) rgb))
    (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring beg end)
          (format &lt;span style="color: #008000;"&gt;"rgb:%s"&lt;/span&gt; (mapconcat 'identity (mapcar 'number-to-string rgb) &lt;span style="color: #008000;"&gt;","&lt;/span&gt;)))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;NDEC&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((link (org-element-context))
         (path (org-element-property &lt;span style="color: #006FE0;"&gt;:path&lt;/span&gt; link))
         (beg (org-element-property &lt;span style="color: #006FE0;"&gt;:begin&lt;/span&gt; link))
         (end (org-element-property &lt;span style="color: #006FE0;"&gt;:end&lt;/span&gt; link))
         (rgb (mapcar 'string-to-number (split-string path &lt;span style="color: #008000;"&gt;","&lt;/span&gt;))))
    (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; rgb (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (- x 10)) rgb))
    (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring beg end)
          (format &lt;span style="color: #008000;"&gt;"rgb:%s"&lt;/span&gt; (mapconcat 'identity (mapcar 'number-to-string rgb) &lt;span style="color: #008000;"&gt;","&lt;/span&gt;)))))


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;ndec&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (skip-chars-backward &lt;span style="color: #008000;"&gt;"0-9"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (looking-at &lt;span style="color: #008000;"&gt;"[0-9]+"&lt;/span&gt;)
      (&lt;span style="color: #ff0000; font-weight: bold;"&gt;error&lt;/span&gt; &lt;span style="color: #008000;"&gt;"No number at point"&lt;/span&gt;))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

(org-link-set-parameters &lt;span style="color: #008000;"&gt;"rgb"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:face&lt;/span&gt; 'rgb-face
                         &lt;span style="color: #006FE0;"&gt;:activate-func&lt;/span&gt; 'rgb-func
                         &lt;span style="color: #006FE0;"&gt;:keymap&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (copy-keymap org-mouse-map)))
                                   (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-&amp;lt;up&amp;gt;"&lt;/span&gt;) 'ninc)
                                   (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-&amp;lt;down&amp;gt;"&lt;/span&gt;) 'ndec)
                                   (define-key map (kbd &lt;span style="color: #008000;"&gt;"s-&amp;lt;up&amp;gt;"&lt;/span&gt;) 'NINC)
                                   (define-key map (kbd &lt;span style="color: #008000;"&gt;"s-&amp;lt;down&amp;gt;"&lt;/span&gt;) 'NDEC)
                                   map))
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
&lt;a href="83,29,238"&gt;83,29,238&lt;/a&gt;   This is a violet color.   &lt;a href="112,17,19"&gt;112,17,19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This is an rgb link with three comma separated numbers. We color each number accordingly, and set the rgb link to the color represented by the RGB pair.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="225,225,225"&gt;225,225,225&lt;/a&gt;  This is a light gray.            
&lt;/p&gt;

&lt;p&gt;
A subtle point in this example is the need to save-match-data. Some functions modify the match-data, and this will mess up the whole font-lock system. I learned that by trial and error.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/11/04/New-link-features-in-org-9.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0&lt;/p&gt;



&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline10"&gt;1. From an org-headline in an org-file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgheadline3"&gt;1.1. Markup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline4"&gt;1.2. Equations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline5"&gt;1.3. Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline6"&gt;1.4. Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline7"&gt;1.5. Code block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline8"&gt;1.6. An image from somewhere other than this directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline9"&gt;1.7. Citations with org-ref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline2"&gt;2. In a mail message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline1"&gt;3. Equations and file attachments do not seem to work out of the box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgheadline11"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
On the org-mode mailing list there was some discussion about sending html mail using orgmode. The support for this in mu4e is deprecated. There is the org-mime library though, and it supports a lot of what is needed for this. As I played around with it though, I came across some limitations:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;I found equations were not rendered as images in the html, and files (in links) were not attached out of the box. I fixed that &lt;a href="#orgheadline1"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I found it useful to modify the org-mime commands to leave point in the To: field when composing emails from org-buffers.&lt;/li&gt;
&lt;li&gt;For use with mu4e, I created a function to open a message in org-mu4e-compose-org-mode, and added a C-cC-c hook to allow me to send it easily &lt;a href="#orgheadline2"&gt;(here)&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
This post documents some work I did figuring out how to send html mails. After some testing, some of these should probably be patched in org-mime.
&lt;/p&gt;

&lt;p&gt;
First, you need to require this library.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;org-mime&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can send a whole org buffer in html like with this command: &lt;a href="org-mime-org-buffer-htmlize"&gt;org-mime-org-buffer-htmlize&lt;/a&gt;. Not all of the internal links work for me (at least in gmail).
&lt;/p&gt;

&lt;p&gt;
The default behavior leaves you at the end of the buffer, which is not too nice. We lightly modify the function here to leave in the To: field.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-mime-org-buffer-htmlize&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Create an email buffer containing the current org-mode file&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;  exported to html and encoded in both html and in org formats as&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;  mime alternatives."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (org-mime-send-buffer 'html)
  (message-goto-to))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline10" class="outline-2"&gt;
&lt;h2 id="orgheadline10"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; From an org-headline in an org-file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
You can compose an email as an org-heading in any org-buffer, and send it as html. In an org-heading, you need to specify a MAIL_FMT property of html, e.g.:
&lt;/p&gt;

&lt;pre class="example"&gt;
   :PROPERTIES:
   :MAIL_FMT: html
   :END:
&lt;/pre&gt;

&lt;p&gt;
Note the following properties can also be set to modify the composed email.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;           (subject (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (funcall mp &lt;span style="color: #008000;"&gt;"MAIL_SUBJECT"&lt;/span&gt;) (nth 4 (org-heading-components))))
           (to (funcall mp &lt;span style="color: #008000;"&gt;"MAIL_TO"&lt;/span&gt;))
           (cc (funcall mp &lt;span style="color: #008000;"&gt;"MAIL_CC"&lt;/span&gt;))
           (bcc (funcall mp &lt;span style="color: #008000;"&gt;"MAIL_BCC"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then, send it with &lt;a href="org-mime-subtree"&gt;org-mime-subtree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Here I modify this function to leave me in the To: field.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-mime-subtree&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Create an email buffer containing the current org-mode subtree&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;  exported to a org format or to the format specified by the&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;  MAIL_FMT property of the subtree."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (org-mime-send-subtree
   (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (org-entry-get nil &lt;span style="color: #008000;"&gt;"MAIL_FMT"&lt;/span&gt; org-mime-use-property-inheritance) 'org))
  (message-goto-to))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here are some sample elements to see if they convert to html reasonably.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline3" class="outline-3"&gt;
&lt;h3 id="orgheadline3"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; Markup&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
&lt;b&gt;bold&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;span class="underline"&gt;underlined&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;italics&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;del&gt;strikethrough&lt;/del&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;code&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
Subscripts: H&lt;sub&gt;2&lt;/sub&gt;O
Superscripts: H&lt;sup&gt;+&lt;/sup&gt;
An entity: To &amp;infin; and beyond
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline4" class="outline-3"&gt;
&lt;h3 id="orgheadline4"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; Equations&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
\(x^2\)
&lt;/p&gt;

&lt;p&gt;
\[x^4\]
&lt;/p&gt;

&lt;p&gt;
\(e^x\)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline5" class="outline-3"&gt;
&lt;h3 id="orgheadline5"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; Tables&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; A table for you.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;x&lt;/td&gt;
&lt;td class="org-right"&gt;y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline6" class="outline-3"&gt;
&lt;h3 id="orgheadline6"&gt;&lt;span class="section-number-3"&gt;1.4&lt;/span&gt; Lists&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
A nested list.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;one
&lt;ul class="org-ul"&gt;
&lt;li&gt;Subentry under one.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;two&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
A definition list:
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;def1&lt;/dt&gt;&lt;dd&gt;first definition&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;
A checklist:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; A checkbox&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Here is a numbered list:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;number 1&lt;/li&gt;
&lt;li&gt;number 2&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline7" class="outline-3"&gt;
&lt;h3 id="orgheadline7"&gt;&lt;span class="section-number-3"&gt;1.5&lt;/span&gt; Code block&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 10)
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.cos(t) * np.exp(-t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.sin(t) * np.exp(-t)

plt.plot(x, y)
plt.savefig(&lt;span style="color: #008000;"&gt;'spiral.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/spiral.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline8" class="outline-3"&gt;
&lt;h3 id="orgheadline8"&gt;&lt;span class="section-number-3"&gt;1.6&lt;/span&gt; An image from somewhere other than this directory&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;p&gt;
&lt;img src="/media/Au-icosahedron-3.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline9" class="outline-3"&gt;
&lt;h3 id="orgheadline9"&gt;&lt;span class="section-number-3"&gt;1.7&lt;/span&gt; Citations with org-ref&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-7"&gt;
&lt;table id="orgtable1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;a&lt;/td&gt;
&lt;td class="org-left"&gt;b&lt;/td&gt;
&lt;td class="org-left"&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
See Table &lt;a href="#table-1"&gt;table-1&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;a class='org-ref-reference' href="#Dominik201408"&gt;Dominik201408&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;h1 class='org-ref-bib-h1'&gt;Bibliography&lt;/h1&gt;
&lt;ul class='org-ref-bib'&gt;&lt;li&gt;&lt;a id="Dominik201408"&gt;[Dominik201408] Carsten Dominik, The Org Mode 8 Reference Manual - Organize your life with GNU  Emacs, Samurai Media Limited (2014).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline2" class="outline-2"&gt;
&lt;h2 id="orgheadline2"&gt;&lt;a id="ID-D44F059D-180C-41C5-BA0A-873723E0DDFB"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; In a mail message&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
You might prefer to do this directly in an email. Here is how you can do it in mu4e. I use this command to open a message in org-mode. The mode switches if you are in the header, or in the body. If you always do this, you could use a hook instead on message-mode. I do not want default html so I do not do it. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mu4e-compose-org-mail&lt;/span&gt; ()
 (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
 (mu4e-compose-new)
 (org-mu4e-compose-org-mode))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For sending, we will use org-mime to htmlize it, and add a C-c C-c hook function to send it.  This hook is a little tricky, we want to preserve C-c C-c behavior in org-mode, e.g. in code blocks, but send it if there is no other C-c C-c action that makes sense, so we add it to the end of the hook. Alternatively, you could bind a special key for it, or run the special command. Note the C-c C-c hook only works in the body of the email. From the header, a plain text message is sent.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;htmlize-and-send&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"When in an org-mu4e-compose-org-mode message, htmlize and send it."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
    (org-mime-htmlize) 
    (message-send-and-exit)))

(add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here is a way to do this for non-mu4e users. It doesn't have the nice mode switching capability though, so you lose completion in emails, and header specific functions. You can switch back to message-mode to regain those.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;compose-html-org&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (compose-mail)
  (message-goto-body)
  (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; *compose-html-org* t)
  (org-mode))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-htmlize-and-send&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"When in an org-mu4e-compose-org-mode message, htmlize and send it."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; *compose-html-org*
    (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; *compose-html-org* nil)
    (message-mode)
    (org-mime-htmlize) 
    (message-send-and-exit)))

(add-hook 'org-ctrl-c-ctrl-c-hook 'org-htmlize-and-send t)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline1" class="outline-2"&gt;
&lt;h2 id="orgheadline1"&gt;&lt;a id="ID-14317E51-C65E-48DD-9B52-B94D6B458E8F"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Equations and file attachments do not seem to work out of the box&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
\(e^{i\pi} - 1 = 0\)
&lt;/p&gt;

&lt;p&gt;
Out of the box, org-mime does not seem to attach file links to emails or make images for equations..
&lt;/p&gt;

&lt;p&gt;
&lt;a href="/media/html-email.org"&gt;html-email.org&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
Here is an adaptation of org-mime-compose that does that for html messages.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;org-mime-compose&lt;/span&gt; (body fmt file &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; to subject headers)
  (&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;message&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((bhook
         (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (body fmt)
           (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((hook (intern (concat &lt;span style="color: #008000;"&gt;"org-mime-pre-"&lt;/span&gt;
                                       (symbol-name fmt)
                                       &lt;span style="color: #008000;"&gt;"-hook"&lt;/span&gt;))))
             (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (&amp;gt; (eval `(length ,hook)) 0)
                 (&lt;span style="color: #0000FF;"&gt;with-temp-buffer&lt;/span&gt;
                   (insert body)
                   (goto-char (point-min))
                   (eval `&lt;span style="color: #D0372D;"&gt;(run-hooks &lt;/span&gt;',hook))
                   (buffer-string))
               body))))
        (fmt (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (symbolp fmt) fmt (intern fmt)))
        (files (org-element-map (org-element-parse-buffer) 'link
                 (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (link)
                   (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (string= (org-element-property &lt;span style="color: #006FE0;"&gt;:type&lt;/span&gt; link) &lt;span style="color: #008000;"&gt;"file"&lt;/span&gt;)
                     (file-truename (org-element-property &lt;span style="color: #006FE0;"&gt;:path&lt;/span&gt; link)))))))
    (compose-mail to subject headers nil)
    (message-goto-body)
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
     ((eq fmt 'org)
      (&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;ox-org&lt;/span&gt;)
      (insert (org-export-string-as
               (org-babel-trim (funcall bhook body 'org)) 'org t)))
     ((eq fmt 'ascii)
      (&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;ox-ascii&lt;/span&gt;)
      (insert (org-export-string-as
               (concat &lt;span style="color: #008000;"&gt;"#+Title:\n"&lt;/span&gt; (funcall bhook body 'ascii)) 'ascii t)))
     ((&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (eq fmt 'html) (eq fmt 'html-ascii))
      (&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;ox-ascii&lt;/span&gt;)
      (&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;ox-org&lt;/span&gt;)
      (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((org-link-file-path-type 'absolute)
             &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;we probably don't want to export a huge style file&lt;/span&gt;
             (org-export-htmlize-output-type 'inline-css)
             (org-html-with-latex 'dvipng)
             (html-and-images
              (org-mime-replace-images
               (org-export-string-as (funcall bhook body 'html) 'html t)))
             (images (cdr html-and-images))
             (html (org-mime-apply-html-hook (car html-and-images))))
        (insert (org-mime-multipart
                 (org-export-string-as
                  (org-babel-trim
                   (funcall bhook body (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (eq fmt 'html) 'org 'ascii)))
                  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (eq fmt 'html) 'org 'ascii) t)
                 html)
                (mapconcat 'identity images &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;)))))
    (mapc #'mml-attach-file files)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgheadline11" class="outline-2"&gt;
&lt;h2 id="orgheadline11"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
This makes it pretty nice to send rich-formatted html text to people.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2016 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2016/10/29/Sending-html-emails-from-org-mode-with-org-mime.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 8.3.5&lt;/p&gt;